#include <iostream>
#include <unordered_map>
#include <vector>
using namespace std;

/**
 * Function to generate a key for each string in the input array of strings.
 * The key is generated by counting the frequency of each character in the
 * string. The key is then constructed by appending the count of each character
 * as a string.
 *
 * @param str The input string for which the key needs to be generated.
 *
 * @return The generated key string.
 */
string getKey(string str) {
  // Initialize a vector to store the count of each character in the string.
  vector<int> count(26);

  // Iterate over each character in the string and increment the count of the
  // character.
  for (char s : str) {
    count[s - 'a']++;
  }

  // Initialize an empty string to store the key.
  string key = "";

  // Iterate over each count in the count vector and append the count as a
  // string to the key.
  for (int c : count) {
    key.append(to_string(c + 'a'));
  }

  // Return the generated key string.
  return key;
}

/**
 * Function to group anagrams in the input array of strings.
 *
 * @param strs The input array of strings.
 *
 * @return A vector of vectors, where each inner vector contains the anagrams of
 * a particular string.
 */
vector<vector<string>> groupAnagrams(vector<string>& strs) {
  // Initialize an unordered map to store the anagrams.
  unordered_map<string, vector<string>> hm;

  // Iterate over each string in the input array.
  for (string s : strs) {
    // Generate a key for the string.
    string key = getKey(s);

    // Add the string to the corresponding key in the unordered map.
    hm[key].push_back(s);
  }

  // Initialize a vector to store the final result.
  vector<vector<string>> ans;

  // Iterate over each key-value pair in the unordered map.
  unordered_map<string, vector<string>>::iterator it = hm.begin();
  while (it != hm.end()) {
    // Add the anagrams corresponding to the current key to the final result.
    ans.push_back(it->second);
    ++it;
  }

  // Return the final result.
  return ans;
}

/**
 * Function to group anagrams in the input array of strings using the
 * approach with sorting each string and using it as a key in an unordered
 * map.
 *
 * @param strs The input array of strings.
 *
 * @return A vector of vectors, where each inner vector contains the anagrams of
 * a particular string.
 */
vector<vector<string>> groupAnagramsOp(vector<string>& strs) {
  // Initialize an unordered map to store the anagrams.
  // The key is the sorted string, and the value is the index of the anagrams.
  unordered_map<string, int> hm;

  // Initialize a vector to store the final result.
  vector<vector<string>> ans;

  // Iterate over each string in the input array.
  for (int i = 0; i < strs.size(); ++i) {
    // Copy the current string to a temporary variable.
    string tmp = strs[i];

    // Sort the temporary string.
    sort(tmp.begin(), tmp.end());

    // If the sorted string is already in the hash map, add the current string
    // to the corresponding key in the unordered map.
    if (hm.find(tmp) != hm.end()) {
      ans[hm[tmp]].push_back(strs[i]);
    } else {
      // If the sorted string is not in the hash map, add the current string
      // as a new key in the unordered map, and add the current string as a
      // new vector in the final result.
      hm[tmp] = ans.size();
      ans.push_back({strs[i]});
    }
  }

  // Return the final result.
  return ans;
}

int main() {
  vector<string> strs{"eat", "tea", "tan", "ate", "nat", "bat"};
  vector<vector<string>> ans = groupAnagrams(strs);
  vector<vector<string>> ansOp = groupAnagramsOp(strs);
  for (auto sarr : ans) {
    for (auto s : sarr) {
      cout << s << ", ";
    }
    cout << "\n";
  }

  cout << "\nOp:\n";

  for (auto sarr : ansOp) {
    for (auto s : sarr) {
      cout << s << ", ";
    }
    cout << "\n";
  }
  return 0;
}